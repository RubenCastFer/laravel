1686964688
waR3U4bTeM%3A0917b355d9cf59f679be120479278397-3eb5f904e4d49133d7b3bed18acb1ec0
s:19232:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjNlYjVmOTA0ZTRkNDkxMzNkN2IzYmVkMThhY2IxZWMwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MjE6InByZXN1cHVlc3RvLmJsYWRlLnBocCI7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBwYXRoIjtzOjQ1OiJyZXNvdXJjZXMvdmlld3MvY2xpZW50ZS9wcmVzdXB1ZXN0by5ibGFkZS5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjEzNDg4OiJAZXh0ZW5kcygnbGF5b3V0cy5tYXN0ZXJDbGllbnRlJykKQHNlY3Rpb24oJ3RpdGxlJywnUHJlc3VwdWVzdG8nKQpAc2VjdGlvbignY29udGVudCcpCjwhRE9DVFlQRSBodG1sPgo8aHRtbCBsYW5nPSJlcyI+Cgo8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9IlVURi04Ij4KICAgIDx0aXRsZT5DbGllbnRlIFByZXN1cHVlc3RvPC90aXRsZT4KICAgIDxsaW5rIGhyZWY9InshISBhc3NldCgnY3NzL3ByZXN1cHVlc3RvLmNzcycpICEhfSIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyI+CiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy9qcXVlcnkvMy42LjAvanF1ZXJ5Lm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvanF1ZXJ5LXZhbGlkYXRlLzEuMTkuMy9qcXVlcnkudmFsaWRhdGUubWluLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9qcXVlcnktdmFsaWRhdGUvMS4xOS4zL2FkZGl0aW9uYWwtbWV0aG9kcy5taW4uanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0ieyEhIGFzc2V0KCdqcy90YXJqZXRhLmpzJykgISF9Ij48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9InshISBhc3NldCgnanMvbG9naW4uanMnKSAhIX0iPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0ieyEhIGFzc2V0KCdqcy9yZWdpc3Rlci5qcycpICEhfSI+PC9zY3JpcHQ+Cgo8L2hlYWQ+Cjxib2R5PgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgoKICAgICAgICAgICAgQGlmKFxTZXNzaW9uOjpoYXMoJ2Vycm9yJykpCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LWRhbmdlciI+e3sgXFNlc3Npb246OmdldCgnZXJyb3InKSB9fTwvZGl2PgogICAgICAgICAgICBAZW5kaWYKICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1sZy0zIj4KICAgICAgICAgICAgICAgIDxoMT57eyRkYXRvc1snY29jaGUnXVswXS0+bWFyY2F9fSB7eyRkYXRvc1snY29jaGUnXVswXS0+bW9kZWxvfX08L2gxPgogICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9zdG9yYWdlL3t7JGRhdG9zWydjb2NoZSddWzBdLT5pbWFnZW59fSIgY2xhc3M9ImltZy1mbHVpZCIgYWx0PSJpbWFnZSI+CiAgICAgICAgICAgICAgICA8aDYgY2xhc3M9Im10LTMgbXMtMyI+UmVjb2dpZGE6IHt7JGRhdG9zWydzdWN1cnNhbCddfX0gPGJyPkZlY2hhOiB7e2RhdGUoJ2QgTSBZIEg6aScsIHN0cnRvdGltZSgkZGF0b3NbJ3JlY29naWRhJ10pKX19PC9oNj4KICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0ibXQtMyBtcy0zIj5EZXZvbHVjacOzbjoge3skZGF0b3NbJ3N1Y3Vyc2FsJ119fSA8YnI+RmVjaGE6IHt7ZGF0ZSgnZCBNIFkgSDppJywgc3RydG90aW1lKCRkYXRvc1snZGV2b2x1Y2lvbiddKSl9fTwvaDY+CiAgICAgICAgICAgICAgICA8aDYgY2xhc3M9Im10LTMgbXMtMyI+VGFyaWZhOiB7eyRkYXRvc1snY29jaGUnXVswXS0+cHJlY2lvfX08L2g2PgogICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJtdC0zIG1zLTMiPkZlY2hhIGRlbCBjb250cmF0bzoge3tkYXRlKCdkIE0gWScsIHN0cnRvdGltZSgkZGF0b3NbJ2NvbnRyYXRvJ10pKX19PC9oNj4KICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0ibXQtMyBtcy0zIj5GaWFuemE6IDUwMOKCrDwvaDY+CiAgICAgICAgICAgICAgICA8aDUgY2xhc3M9Im10LTMgbXMtMyI+UHJlY2lvIGZpbmFsOiB7eyRkYXRvc1sncHJlY2lvVG90YWwnXX194oKsPC9oNT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtbGctOSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtbGctMTIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib3JkZXIgYm9yZGVyLWRhcmsgcm91bmRlZC0zIG0tNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibXMtMyBtdC0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWNpYmUgbGxlbm8gZWwgZGVww7NzaXRvIHkgZW50csOpZ2FsbyBsbGVubyBhIGxhIGRldm9sdWNpw7NuLiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2VndXJvIGRlIG9jdXBhbnRlcyBkZWwgdmVow61jdWxvLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb2JlcnR1cmEgYsOhc2ljYSBkZSBkYcOxb3MgY29uIGZyYW5xdWljaWEgKENEVykuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElWQSBpbmNsdWlkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgQGlmIChzZXNzaW9uKCktPmdldCgndGlwbycpPT0nZW1wbGVhZG8nKQogICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzcz0idGV4dC1jZW50ZXIgbS01Ij5DaWVycmUgc2VzacOzbiBjb21vIGVtcGxlYWRvPC9oMT4KICAgICAgICAgICAgICAgICAgICBAZW5kaWYKICAgICAgICAgICAgICAgICAgICA8IS0tZXN0YSByZWdpc3RyYWRvIC0tPgogICAgICAgICAgICAgICAgICAgIEBpZiAoc2Vzc2lvbigpLT5nZXQoJ3RpcG8nKT09J2NsaWVudGUnKQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtbGctMTIgIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm9yZGVyIGJvcmRlci1kYXJrIHJvdW5kZWQtMyBtLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzPSJtcy0zIG10LTMiPkltcG9ydGU6IHt7JGRhdG9zWydwcmVjaW9Ub3RhbCddfX3igqw8L2gxPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gaWQ9InBhZ2EiIG1ldGhvZD0icG9zdCIgYWN0aW9uPSIvY2xpZW50ZS9wYWdvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY3NyZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBmb3JtLWZsb2F0aW5nIGctMiBtcy0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJwcy00Ij5EYXRvcyBkZSBsYSB0YXJqZXRhPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1sZy03IHAtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWZsb2F0aW5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9InRpdHVsYXIiIG5hbWU9InRpdHVsYXIiIHBsYWNlaG9sZGVyPSJ0aXR1bGFyIiByZXF1aXJlZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJ0aXR1bGFyIj5UaXR1bGFyPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1mbG9hdGluZyBtdC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9Im5UYXJqZXRhIiBuYW1lPSJuVGFyamV0YSIgcGxhY2Vob2xkZXI9Im5UYXJqZXRhIiByZXF1aXJlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9Im5UYXJqZXRhIj5OwrogVGFyamV0YTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWZsb2F0aW5nIGNvbC0xMiBjb2wtbGctNCBtdC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9InNlZ3VyaWRhZCIgbmFtZT0ic2VndXJpZGFkIiBwbGFjZWhvbGRlcj0ic2VndXJpZGFkIiByZXF1aXJlZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJzZWd1cmlkYWQiPkNvZCBTZWd1cmlkYWQ8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLWxnLTUgcC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBnLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNj5DYWR1Y2lkYWQ6PC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWZsb2F0aW5nIG10LTIgY29sLTEyIGNvbC1sZy02Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJkZCIgbmFtZT0iZGQiIHBsYWNlaG9sZGVyPSJkZCIgcmVxdWlyZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZGQiPmRkPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWZsb2F0aW5nIG10LTIgY29sLTEyIGNvbC1sZy02Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJNTSIgbmFtZT0iTU0iIHBsYWNlaG9sZGVyPSJNTSIgcmVxdWlyZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iTU0iPk1NPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgY2xhc3M9InctMTAwIGJ0biBidG4tbGcgYnRuLXByaW1hcnkgbXQtMiIgdmFsdWU9IlJlYWxpemFyIFBhZ28iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIEBlbmRpZgoKICAgICAgICAgICAgICAgICAgICA8IS0tTm8gZXN0YSByZWdpc3RyYWRvIHRlbmRyYSBxdWUgaW5pY2lhciBzZXNpb24gdSByZWdpc3RyYXJzZSAtLT4KICAgICAgICAgICAgICAgICAgICBAaWYgKHNlc3Npb24oKS0+Z2V0KCd0aXBvJykhPSdjbGllbnRlJyAmJiBzZXNzaW9uKCktPmdldCgndGlwbycpIT0nZW1wbGVhZG8nKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwhLS1Mb2dpbiAtLT4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLWxnLTQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib3JkZXIgYm9yZGVyLWRhcmsgcm91bmRlZC0zIG0tNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWNlbnRlciBjb250YWluZXIgYmctc2Vjb25kYXJ5IHAtMiB0ZXh0LWRhcmsgYmctb3BhY2l0eS01MCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJoNSBtYi0zIGZ3LW5vcm1hbCB0ZXh0LXdoaXRlIj7Cv1RpZW5lcyB5YSB1bmEgY3VlbnRhPzwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJoNSBtYi0zIGZ3LW5vcm1hbCB0ZXh0LXdoaXRlIj5JbmljaWFyIHNlc2nDs248L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gQGlmKFxTZXNzaW9uOjpoYXMoJ2Vycm9yJykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtZGFuZ2VyIj57eyBcU2Vzc2lvbjo6Z2V0KCdlcnJvcicpIH19PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGlmIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIGlkPSJsb2dpbkNsaWVudGUiIG1ldGhvZD0icG9zdCIgYWN0aW9uPSIvY2xpZW50ZS9sb2dpbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjc3JmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZmxvYXRpbmciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImVtYWlsIiBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0iZW1haWwiIG5hbWU9ImVtYWlsIiBwbGFjZWhvbGRlcj0ibmFtZUBleGFtcGxlLmNvbSIgcmVxdWlyZWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJlbWFpbCI+Q29ycmVvPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZmxvYXRpbmcgbXQtMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJwYXNzd29yZCIgbmFtZT0icGFzc3dvcmQiIHBsYWNlaG9sZGVyPSJQYXNzd29yZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJwYXNzd29yZCI+Q29udHJhc2XDsWE8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgY2xhc3M9InctMTAwIGJ0biBidG4tbGcgYnRuLXByaW1hcnkgbXQtMiIgdmFsdWU9IkluaWNpYXIgc2VzacOzbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21haW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICA8IS0tcmVnaXN0cm8gLS0+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1sZy04Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm9yZGVyIGJvcmRlci1kYXJrIHJvdW5kZWQtMyBtLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIgY29udGFpbmVyIGJnLXNlY29uZGFyeSBwLTIgdGV4dC1kYXJrIGJnLW9wYWNpdHktNTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iaDUgbWItMyBmdy1ub3JtYWwgdGV4dC13aGl0ZSI+wr9Ub2RhdsOtYSBzaW4gdW5hIGN1ZW50YT88L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iaDUgbWItMyBmdy1ub3JtYWwgdGV4dC13aGl0ZSI+UmVnaXN0cmF0ZSB5YTwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBAaWYoXFNlc3Npb246OmhhcygnZXJyb3InKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1kYW5nZXIiPnt7IFxTZXNzaW9uOjpnZXQoJ2Vycm9yJykgfX08L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kaWYgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gaWQ9InJlZ2lzdHJvQ2xpZW50ZSIgbWV0aG9kPSJwb3N0IiBhY3Rpb249Ii9jbGllbnRlL3JlZ2lzdGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNzcmYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQG1ldGhvZCgnUFVUJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1mbG9hdGluZyByb3cgZy0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZmxvYXRpbmcgbXQtMiBjb2wtMTIgY29sLWxnLTQgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9Im5hbWUiIG5hbWU9Im5hbWUiIHBsYWNlaG9sZGVyPSJuYW1lIiByZXF1aXJlZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJuYW1lIiBjbGFzcz0ibWUtMyI+Tm9tYnJlPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1mbG9hdGluZyBtdC0yIGNvbC0xMiBjb2wtbGctOCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJhcGVsbGlkb3MiIG5hbWU9ImFwZWxsaWRvcyIgcGxhY2Vob2xkZXI9ImFwZWxsaWRvcyIgcmVxdWlyZWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iYXBlbGxpZG9zIj5BcGVsbGlkb3M8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWZsb2F0aW5nIG10LTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImVtYWlsIiBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0iZW1haWwiIG5hbWU9ImVtYWlsIiBwbGFjZWhvbGRlcj0ibmFtZUBleGFtcGxlLmNvbSIgcmVxdWlyZWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJlbWFpbCI+Q29ycmVvPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZmxvYXRpbmcgbXQtMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJwYXNzd29yZCIgbmFtZT0icGFzc3dvcmQiIHBsYWNlaG9sZGVyPSJQYXNzd29yZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJwYXNzd29yZCI+Q29udHJhc2XDsWE8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1mbG9hdGluZyBtdC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJwYXNzd29yZCIgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9InBhc3N3b3JkQ29uZmlybSIgbmFtZT0icGFzc3dvcmRDb25maXJtIiBwbGFjZWhvbGRlcj0iUGFzc3dvcmRDb25maXJtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InBhc3N3b3JkQ29uZmlybSI+Q29uZmlybWFyIENvbnRyYXNlw7FhPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZmxvYXRpbmcgcm93IGctMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWZsb2F0aW5nIGNvbC0xMiBjb2wtbGctNiBtdC0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9ImRuaSIgbmFtZT0iZG5pIiBwbGFjZWhvbGRlcj0iZG5pIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJkbmkiPkROSTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZmxvYXRpbmcgY29sLTEyIGNvbC1sZy02IG10LTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJudW1iZXIiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJ0ZWxlZm9ubyIgbmFtZT0idGVsZWZvbm8iIHBsYWNlaG9sZGVyPSJ0ZWxlZm9ubyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0idGVsZWZvbm8iPlRlbGVmb25vPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZmxvYXRpbmcgY29sLTEyIGNvbC1sZy00IG10LTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0icGFpcyIgbmFtZT0icGFpcyIgcGxhY2Vob2xkZXI9InBhaXMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InBhaXMiPlBhaXM8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWZsb2F0aW5nIGNvbC0xMiBjb2wtbGctOCBtdC0yICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJwcm92aW5jaWEiIG5hbWU9InByb3ZpbmNpYSIgcGxhY2Vob2xkZXI9InByb3ZpbmNpYSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0icHJvdmluY2lhIj5Qcm92aW5jaWE8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWZsb2F0aW5nIGNvbC0xMiBjb2wtbGctNyBtdC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9ImNpdWRhZCIgbmFtZT0iY2l1ZGFkIiBwbGFjZWhvbGRlcj0iY2l1ZGFkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJjaXVkYWQiPkNpdWRhZDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZmxvYXRpbmcgY29sLTEyIGNvbC1sZy01IG10LTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJudW1iZXIiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJjcCIgbmFtZT0iY3AiIHBsYWNlaG9sZGVyPSJjcCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iY3AiPkPDs2RpZ28gUG9zdGFsPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1mbG9hdGluZyAgbXQtMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJjYWxsZSIgbmFtZT0iY2FsbGUiIHBsYWNlaG9sZGVyPSJjYWxsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iY2FsbGUiPkRpcmVjY2nDs248L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiBjbGFzcz0ibXQtMiB3LTEwMCBidG4gYnRuLWxnIGJ0bi1wcmltYXJ5IiB2YWx1ZT0iUmVnaXN0cmF0ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIEBlbmRpZgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvYm9keT4KCjwvaHRtbD4KQGVuZHNlY3Rpb24iO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fXM6NDA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZW51bXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbWV0YWRhdGEiO2E6MDp7fX0=";